classDiagram
    class User {
        <<abstract>>
        +int id
        +string email
        +string password_hash
        +string first_name
        +string last_name
        +string phone_number
        +string role
        +bool is_active
        +datetime created_at
        +datetime last_login
        +authenticate(email, password): bool
        +reset_password(token, new_password): bool
        +update_profile(data): bool
    }
    
    class Parent {
        +int id
        +int user_id
        +string address
        +string city
        +string postal_code
        +string profession
        +getChildren(): List~Student~
        +getInvoices(): List~Invoice~
        +initiateRegistration(student_id): Registration
    }
    
    class Administrator {
        +int id
        +int user_id
        +string department
        +string position
        +validateRegistration(registration_id, status, comments): bool
        +generateReports(): List~Report~
        +manageUsers(action, user_data): bool
    }
    
    class Teacher {
        +int id
        +int user_id
        +List~int~ class_ids
        +List~string~ subjects
        +string qualification
        +getClassList(class_id): List~Student~
        +submitGrades(class_id, term_id, grades_data): bool
        +getStudentPerformance(student_id): StudentPerformance
    }
    
    class Student {
        +int id
        +string first_name
        +string last_name
        +date date_of_birth
        +string gender
        +int class_id
        +int academic_level
        +List~int~ parent_ids
        +bool is_active
        +string photo_url
        +string medical_info
        +datetime created_at
        +getParents(): List~Parent~
        +getRegistrations(): List~Registration~
        +getReportCards(): List~ReportCard~
    }
    
    class SchoolClass {
        +int id
        +string name
        +string level
        +int academic_year
        +int capacity
        +int teacher_id
        +int room_number
        +getStudents(): List~Student~
        +getTeacher(): Teacher
        +getAvailableSlots(): int
    }
    
    class Registration {
        +int id
        +int student_id
        +int class_id
        +int academic_year
        +datetime submission_date
        +string status
        +string admin_comments
        +int reviewed_by
        +List~DocumentSubmission~ documents
        +datetime reviewed_at
        +submit(): bool
        +cancel(): bool
        +addDocument(document): bool
        +getStatus(): string
    }
    
    class DocumentSubmission {
        +int id
        +int registration_id
        +string document_type
        +string file_path
        +string file_name
        +datetime uploaded_at
        +bool is_verified
        +string verification_comments
        +download(): File
        +verify(is_valid, comments): bool
    }
    
    class Invoice {
        +int id
        +int parent_id
        +int student_id
        +int registration_id
        +decimal amount
        +string currency
        +date issue_date
        +date due_date
        +string status
        +List~Payment~ payments
        +string invoice_number
        +generatePDF(): File
        +sendToParent(): bool
        +calculateBalance(): decimal
    }
    
    class Payment {
        +int id
        +int invoice_id
        +decimal amount
        +string currency
        +string payment_method
        +string transaction_id
        +datetime payment_date
        +string status
        +string receipt_url
        +processPayment(): bool
        +generateReceipt(): File
        +refund(): bool
    }
    
    class FeeStructure {
        +int id
        +string level
        +int academic_year
        +decimal tuition_fee
        +decimal registration_fee
        +decimal books_fee
        +decimal activities_fee
        +decimal meals_fee
        +bool is_active
        +calculateTotalFee(student_id, options): decimal
        +applyDiscount(student_id, discount_type): decimal
    }
    
    class Term {
        +int id
        +int academic_year
        +string name
        +date start_date
        +date end_date
        +date grade_submission_deadline
        +date report_publication_date
        +isActive(): bool
        +getRemainingDays(): int
    }
    
    class Grade {
        +int id
        +int student_id
        +int teacher_id
        +int subject_id
        +int term_id
        +decimal score
        +string comments
        +datetime submitted_at
        +bool is_published
        +calculatePercentage(): decimal
        +getLetterGrade(): string
    }
    
    class Subject {
        +int id
        +string name
        +string code
        +string level
        +int coefficient
        +List~int~ teacher_ids
        +getAverageGrade(class_id, term_id): decimal
        +getTeachers(): List~Teacher~
    }
    
    class ReportCard {
        +int id
        +int student_id
        +int term_id
        +int class_id
        +string general_comments
        +string teacher_comments
        +date generated_at
        +bool is_published
        +getGrades(): List~Grade~
        +calculateAverage(): decimal
        +generatePDF(): File
    }
    
    class Message {
        +int id
        +int sender_id
        +int recipient_id
        +string subject
        +string content
        +datetime sent_at
        +bool is_read
        +datetime read_at
        +List~Attachment~ attachments
        +markAsRead(): bool
        +reply(content): Message
        +forward(recipient_id, content): Message
    }
    
    class Attachment {
        +int id
        +int message_id
        +string file_name
        +string file_path
        +int file_size
        +string mime_type
        +datetime uploaded_at
        +download(): File
    }
    
    class Notification {
        +int id
        +int user_id
        +string title
        +string content
        +string notification_type
        +string link
        +datetime created_at
        +bool is_read
        +send(): bool
        +markAsRead(): bool
    }
    
    class AcademicCalendar {
        +int id
        +int academic_year
        +string event_name
        +date start_date
        +date end_date
        +string description
        +bool is_holiday
        +getUpcomingEvents(days): List~AcademicCalendar~
    }
    
    %% Relationships
    User <|-- Parent : extends
    User <|-- Administrator : extends
    User <|-- Teacher : extends
    
    Parent "1" -- "*" Student : has
    Student "*" -- "1" SchoolClass : belongs to
    Teacher "1" -- "*" SchoolClass : manages
    Teacher "*" -- "*" Subject : teaches
    
    Student "1" -- "*" Registration : submits
    Registration "1" -- "*" DocumentSubmission : contains
    Registration "1" -- "1" Invoice : generates
    Invoice "1" -- "*" Payment : receives
    
    FeeStructure -- Invoice : determines
    
    Student "1" -- "*" Grade : receives
    Subject "1" -- "*" Grade : associated with
    Term "1" -- "*" Grade : belongs to
    
    Grade "*" -- "1" ReportCard : included in
    Student "1" -- "*" ReportCard : receives
    Term "1" -- "*" ReportCard : associated with
    
    User "1" -- "*" Message : sends
    User "1" -- "*" Message : receives
    Message "1" -- "*" Attachment : contains
    
    User "1" -- "*" Notification : receives